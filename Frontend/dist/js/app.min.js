angular.module('whiskey.services',
  [
    'whiskey.api' // backend 
  ])

/**
 * Created by wrichtsfeld on 30/11/2017.
 */
'use strict'
var config = {
  apiKey: 'AIzaSyDJET3l3DV8itYoTccdhLzv3xQ8JMoiSvU',
  authDomain: 'whiskeytaste-307bd.firebaseapp.com',
  databaseURL: 'https://whiskeytaste-307bd.firebaseio.com',
  projectId: 'whiskeytaste-307bd',
  storageBucket: 'whiskeytaste-307bd.appspot.com',
  messagingSenderId: '960794625142'
}
firebase.initializeApp(config)

angular.module('whiskey.webapp',
  [
    'firebase',
    'ui.router',
    'whiskey.services',
    'whiskey.auth',
    'whiskey.user',
    'whiskey.dashboard',
    'whiskey.whiskey',
    'whiskey.loading'])
  .config(['$stateProvider', '$urlRouterProvider', '$locationProvider',
    function ($stateProvider, $urlRouterProvider, $locationProvider) {
      $urlRouterProvider.otherwise('/404') // fallback url
      $locationProvider.hashPrefix(''); // remove ! in url
      $stateProvider
        .state('login', {
          url: '/login',
          // template: '<h1> LOGIN </h1>',
          templateUrl: '/app/modules/auth/login.html',
          controller: 'LoginController'
        })
        .state('register', {
          url: '/register',
          // template: '<h1>login.register<h1>',
          templateUrl: 'app/modules/auth/register.html',
          controller: 'LoginController'
        })
        .state('dashboard', {
          url: '/dashboard',
          // template: '<h1>Dashboard</h1>',
          templateUrl: '/app/modules/dashboard/dashboard.html',
          controller: 'DashboardController'
        })
        .state('dashboard.taste', {
          url: '/dashboard/taste',
          templateUrl: '/app/modules/whiskey/list.html'
        })
        .state('dashboard.user', {
          url: '/dashboard/user',
          templateUrl: '/app/modules/user/user.html'
        })

        .state('404', {
          url: '*path',
          templateUrl: '404.html'
        })
    }])
  .controller('AppController', [
    '$state', '$location', '$scope', 'ApplicationService',
    function ($state, $location, $scope, ApplicationService) {
      // console.log(user) ApplicationService.getUser()
      console.log('applicationcontroller initialized')
      if (true) {
        console.log('goto dashboard')
        $state.go('dashboard.taste')
      } else {
        console.log('goto login')
        $state.go('login')
      }
    }
  ])
  .service('ApplicationService', ['$state', '$location', '$firebaseAuth', function ($state, $location, $firebaseAuth) {
    var user = ''
    var auth = $firebaseAuth()

    return {
      getUser: function () {
        if (user == '') {
          user = localStorage.getItem('userEmail')
        }
        console.log(user)
        return user
      },
      setUser: function (value) {
        localStorage.setItem('userEmail', value)
        user = value
      },
      logoutUser: function () {
        auth.$signOut()
        console.log('Logged Out Succesfully')
        user = ''
        localStorage.removeItem('userEmail')
        $location.path('')
      }
    }
  }]).run([
  '$state',
  'ApplicationService',
  function ($state, ApplicationService) {
    // var user = 
    console.log('app run')
  }])
  /*;(function (orig) {
    angular.modules = []
    angular.module = function () {
      if (arguments.length > 1) {
        angular.modules.push(arguments[0])
      }
      console.log(angular.modules)
      return orig.apply(null, arguments)
    }
  })(angular.module)*/

'use strict'
var ngmod = angular.module('whiskey.dashboard', [
  'ui.router',
  'ngDialog'
])
  .config(['$stateProvider', '$urlRouterProvider', '$locationProvider',
    function ($stateProvider, $urlRouterProvider, $locationProvider) {
      console.log('init dashboard')
    }])
  .controller('DashboardController', [
    '$scope',
    '$state',
    '$rootScope',
    '$location',
    'ApplicationService',
    function ($scope, $state, $rootScope, $location, ApplicationService) {
      // goto taste
      console.log('in dashboard')
      $scope.logout = function () {
        console.log('logout')
        ApplicationService.logoutUser()
      // Goto Login
      }
    }])

'use strict'
var ngmod = angular.module('whiskey.auth', [
  'ui.router',
  'ngDialog'
])
  .controller('LoginController', [
    '$scope',
    '$state',
    '$location',
    '$firebaseAuth',
    function ($scope, $state, LoginService, $location, $firebaseAuth) {
      console.log('in login')
      $scope.signIn = function () {
        $scope.loading.inc()
        console.log('sign in')
        var username = $scope.user.email
        var password = $scope.user.password
        var auth = $firebaseAuth()
        auth.$signInWithEmailAndPassword(username, password).then(function () {
          console.log('User Login Successful')
          ApplicationService.setUser($scope.user)
          $scope.loading.dec()
          $state.go('dasboard.taste')
        }).catch(function (error) {
          $scope.loading.dec()
          $scope.errMsg = true
          $scope.errorMessage = error.message
        })
      }
      $scope.gotoregister = function () {
        // $state.go('register', {})
      }
      $scope.gotologin = function () {
        // $state.go('login', {})
      }
    }]).service('LoginService', [
  '$state',
  function ($state) {}
])

angular.module('whiskey.api', []).value('WEBAPP_API_VERSION', '1')
  .service('BackendAPIService', [
    '$http',
    '$q',
    '$host',
    'WEBAPP_API_VERSION',
    function ($http, $q, $host, APIEVAL_API_VERSION) {
      var self = this
      var apiVersion = APIEVAL_API_VERSION
      // ##########################################################
      // ##########################################################
      // Base backend calls
      // ##########################################################
      // ##########################################################
      function addApiVersionToPathIfNotExisting (path) {
        if (!(/^\/?[1-9]\//i).test(path)) {
          // API version not provided -> use the configured one
          if (path.indexOf('/') === 0) {
            path = '/' + apiVersion + path
          } else {
            path = '/' + apiVersion + '/' + path
          }
        }
        return path
      }

      function backendCall (backend, method, path, data, additionalHeaders) {
        path = addApiVersionToPathIfNotExisting(path)

        var requestHeaders = {
          'Content-Type': 'application/json'
        }
        return $q(function (resolve, reject) {
          angular.forEach(additionalHeaders, function (headerValue, headerName) {
            requestHeaders[headerName] = headerValue
          })
          $http({
            url: $host.apiURL(path),
            method: method,
            headers: requestHeaders,
            data: data
          }).then(function (resp) {
            if (!!resp && resp.status !== 200) {
              reject(resp.data)
            } else {
              resolve(resp.data)
            }
          }, function (resp) {
            reject(resp.data)
          })
        }, console.error)
      }

      // all calls without authorization check
      self.post = function (path, data, headers) {
        return backendCall(self, 'POST', path, data, headers)
      }

      self.put = function (path, data, headers) {
        return backendCall(self, 'PUT', path, data, headers)
      }

      self.get = function (path, headers) {
        return backendCall(self, 'GET', path, null, headers)
      }

      self.delete = function (path, headers) {
        return backendCall(self, 'DELETE', path, undefined, headers)
      }

      // ##########################################################
      // ##########################################################
      // List of Backend calls
      // ##########################################################
      // ##########################################################

      // Get all apis
      self.getAPIs = function () {
        return self.get('/apis')
      }

      // update an api title
      self.updateAPITitle = function (apiid, title) {
        return self.put('/apis/' + apiid + '/title', title)
      }

      // Update settings for an api
      self.updateAPISetting = function (apiid, setting) {
        return self.put('/apis/' + apiid + '/settings', setting)
      }

      // Send a new api file to backend
      self.postAPIfile = function (file) {
        return self.post('/files', file)
      }

      // validate an api
      self.validteAPIreport = function (validation) {
        return self.post('/reports/violation', validation)
      }

      // compare two apis
      self.compareAPIReport = function (apiids) {
        return self.post('/reports/comparison', apiids)
      }

      // get all rules for violation report
      self.getRules = function () {
        return self.get('/rules')
      }

      // get settings for an api
      self.getSettings = function () {
        return self.get('/settings')
      }

      // get specific setting
      self.getSetting = function (id) {
        return self.get('/settings/' + id)
      }

      // create a new setting
      self.postSetting = function (settings) {
        return self.post('/settings', settings)
      }

      self.putSetting = function (id, settings) {
        return self.put('/settings/' + id, settings)
      }
    }
  ])

'use strict'
angular.module('whiskey.api')
  .factory('$host', [
    '$window',

    function ($window) {
      function Host () {
      }

      function contains (text, search) {
        return text.indexOf(search) > -1
      }

      Host.apiHost = function () {
        if (!!this.host) {
          return this.host
        }
        return 'https://us-central1-whiskeytaste-307bd.cloudfunctions.net/api' // backend api url
      }

      Host.setApiHost = function (host) {
        this.host = host
      }

      Host.apiURL = function (path) {
        var url = this.apiHost() + makeUrlPathAbsolute(path)
        return url
      }

      function makeUrlPathAbsolute (path) {
        var hasPrefix = (path.indexOf('/') === 0)
        return (hasPrefix ? '' : '/') + path
      }

      return Host
    }
  ])

/**
 * Created by wrichtsfeld on 01/12/2017.
 * Controller which handles the loading overlay to "block" UI
 */
'use strict'
angular.module('whiskey.loading', [])
  .controller('overlayController', ['$scope',
    function ($scope) {
      var loads = 0
      $scope.loading = {
        inc: function () {
          loads++
        },
        dec: function () {
          loads--
        },
        isLoading: function () {
          return loads > 0
        }
      }
      $scope.errors = []
    }])

'use strict'
var ngmod = angular.module('whiskey.user', [
  'ui.router',
  'ngDialog'
])
  .controller('UserController', [
    '$scope',
    '$state',
    '$rootScope',
    '$location',
    function ($scope, $state, $rootScope, $location) {}])
    /*.service('UserService', [
    '$state',
    function ($state) {
      var self = this
    }
])
*/

'use strict'
var ngmod = angular.module('whiskey.whiskey', [
  'ui.router',
  'ngDialog'
])
  .controller('WhiskeyController', [
    '$scope',
    '$state',
    '$rootScope',
    '$location',
    function ($scope, $state, $rootScope, $location) {
      // goto taste
      $scope.openWhiskeys = []

      $scope.tasteWhiskey = function () {
        // Taste a whiskey
        console.log('tate whiskey')
      }
      $scope.openWhiskeyBottle = function () {
        // Open a whiskey bottle
        console.log('open whiskey')
      }
    }])
    /*.service('WhiskeyService', [
    '$state',
    function ($state) {
      var self = this
    }
])
*/
